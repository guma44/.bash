# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles


# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White
RESET="\e[m"

# function parse_git_dirty() {
	# [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
# }

# function parse_git_branch() {
	# git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
# }

# function parse_git_sha() {
    # git log --pretty=format:'%h' -1 2> /dev/null
# }
#
function parse_git_dirty {
        status=`git status 2> /dev/null`
        dirty=`    echo -n "${status}" 2> /dev/null | grep -q "Changed but not updated" 2> /dev/null; echo "$?"`
        untracked=`echo -n "${status}" 2> /dev/null | grep -q "Untracked files" 2> /dev/null; echo "$?"`
        ahead=`    echo -n "${status}" 2> /dev/null | grep -q "Your branch is ahead of" 2> /dev/null; echo "$?"`
        newfile=`  echo -n "${status}" 2> /dev/null | grep -q "new file:" 2> /dev/null; echo "$?"`
        renamed=`  echo -n "${status}" 2> /dev/null | grep -q "renamed:" 2> /dev/null; echo "$?"`
        deleted=`  echo -n "${status}" 2> /dev/null | grep -q "deleted:" 2> /dev/null; echo "$?"`
        modified=`  echo -n "${status}" 2> /dev/null | grep -q "modified:" 2> /dev/null; echo "$?"`
        bits=''
        if [ "${dirty}" == "0" ]; then
                bits="$bits!"
        fi
        if [ "${untracked}" == "0" ]; then
                bits="$bits"
        fi
        if [ "${newfile}" == "0" ]; then
                bits="$bits+"
        fi
        if [ "${ahead}" == "0" ]; then
                bits="$bits>"
        fi
        if [ "${renamed}" == "0" ]; then
                bits="$bits*"
        fi
        if [ "${deleted}" == "0" ]; then
                bits="$bits-"
        fi
        if [ "${modified}" == "0" ]; then
                bits="$bits#"
        fi
        echo $bits
}

function parse_git_svn_revision {
        ref1=$(__git_ps1 | sed -e "s/ (\(.*\))/\1 $(parse_git_dirty)/")
        echo "${ref1}"
}

function get_branch(){
    [ -d .git  ] || git rev-parse --git-dir > /dev/null 2>&1 && echo " on "
}

PS1="\[$BRed\]\u\[$BBlue\]@\[$BGreen\]\h \[$BWhite\]\[$BYellow\]\w\[$BCyan\]\$(get_branch)\[$PURPLE\]\$(parse_git_svn_revision)\[$BWhite\]\n\$ \[$RESET\]"
